<pre class='metadata'>
Title: Linked Data Event Streams
Shortname: LDES
Level: 1
Status: LS
Group: TREE community group
URL: https://w3id.org/ldes/specification
Markup Shorthands: markdown yes
Editor: Pieter Colpaert, https://pietercolpaert.be
Repository: https://github.com/SEMICeu/LinkedDataEventStreams
Abstract: The focus of a Linked Data Event Stream (LDES) is to allow clients to replicate the history of a dataset and efficiently synchronize with its latest changes. An LDES is a collection of immutable RDF objects, such as version objects, sensor observations or archived representations.
</pre>

# Introduction # {#introduction}

The base URI for LDES is `https://w3id.org/ldes#`, and the preferred prefix is `ldes`.

This specification uses the [TREE specification](https://treecg.github.io/specification) to describe collections, which in turn is compatible with other specifications such as [[!activitystreams-core]], [[!VOCAB-DCAT-2]], [[!LDP]] or [Shape Trees](https://shapetrees.github.io/specification/spec). 

The focus of a Linked Data Event Stream (LDES) is to allow clients to replicate the history of a dataset and efficiently synchronize with its latest changes. An LDES is a collection of immutable RDF ([[!rdf-primer]]), and 
 `ldes:EventStream` is a `rdfs:subClassOf` of the `tree:Collection` class.
It extends the `tree:Collection` class by saying all of its members are immutable, and you can thus only add members to the collection.

<!-- 
Reads like an ad

Note: When a client once processed a member, it should never have to process it again. A Linked Data Event Stream client can thus keep a list (or cache) of already processed member IRIs. A reference implementation of a client is available as part of the Comunica framework on [NPM and Github](https://github.com/treecg/event-stream-client). -->

<div class="example" highlight="turtle">
```turtle
<C1> a ldes:EventStream ;
     tree:shape <shape1.shacl> ; # future versions of this shape MUST be backwards compatible
     tree:member <Obervation1> .

<Observation1> a sosa:Observation ;
               sosa:resultTime "2021-01-01T00:00:00Z"^^xsd:dateTime ;
               sosa:hasSimpleResult "..." .
```
</div>

<!-- 
The ldes:EventStream changes all the time, with each new object. Is this about changing the shape of the collection? If so, why would you need to change the objects themselves? The shapes are supposed to be backwards compatible to prevent exactly that.

Note: When you need to change an earlier version of an `ldes:EventStream`, there are two options: create a new version of the object with a new shape that is backward compatible, and add the new version of that object again as a member on the stream, or replicate and transform the entire collection into a new `ldes:EventStream`. You can indicate that the new `ldes:EventStream` is derived from 
-->

<div class="example">
```turtle
<C2> a ldes:EventStream ;
     tree:shape <shape2.shacl> ; 
     tree:member <AddressRecord1/version1> .

<AddressRecord1/version1> dcterms:created "2021-01-01T00:00:00Z"^^xsd:dateTime ;
                          adms:versionNotes "First version of this address" ;
                          dcterms:isVersionOf <AddressRecord1> ;
                          dcterms:title "Streetname X, ZIP Municipality, Country" .
```
</div>

Note: in Example 1, we consider the Observation object ot be an immutable object and we can use the existing identifiers. In Example 2 however, we still had to create version IRIs in order to be able to link to immutable objects.

A `tree:shape` SHOULD be defined with the `ldes:EventStream` instance as its subject. The shape of the collection defines its members: it tells clients all existing and future members of the stream conform to that that shape. This shape MAY evolve, but it MUST be backwards compatible with the previous version.

<!--What’s an authoritative source and what’s a third party indexer?-->

# Fragmenting and pagination # {#tree}


Linked Data Event Streams MAY be fragmented when their size becomes too big for 1 HTTP response.
Fragmentations are described using the [TREE specification](https://treecg.github.io/specification).
All relation types from the TREE specification MAY be used. Additionally, [search templates](https://treecg.github.io/specification/#timesearch) MAY be used alongside TREE relations.

<div class="example">
```turtle
<C1> a ldes:EventStream ;
     tree:shape <shape1.shacl> ; 
     tree:member <Obervation1>, ... ;
     tree:view <?page=1> .

<?page=1> a tree:Node ;
    tree:relation [
        a tree:GreaterThanOrEqualToRelation ;
        tree:path sosa:resultTime ;
        tree:node <?page=2> ;
        tree:value "2020-12-24T12:00:00Z"^^xsd:dateTime
     ] .
```
</div>

An `tree:importStream` MAY be used to describe a publish-subscribe interface to subscribe to new members in the LDES. 

Note: A fragmentation based on creation time of the objects is the most common fragmentation for an LDES, as this ensures that only the last page of the collection will change. If the objects are processed out of order, it is advisable to fall back to the timestamp of when they are processed instead.


# Retention policies # {#retention}

An LDES SHOULD keep all objects that have been added to it, but it MAY specify a retention policy in which the server indicates data will be eventually omitted. Two types of retention policies are defined which can be used with a `ldes:retentionPolicy` with an instance of a `tree:View` as its subject:
 1. `ldes:DurationAgoPolicy`: a time-based retention policy in which data generated before a specific time is removed
 2. `ldes:LatestVersionSubset`: a version subset based on the latest versions of an entity in the stream

Different retention policies MAY be combined.
When policies are used together, an object is retained until all policies allow it to be omitted.

## Time-based retention policies ## {#time-based-retention}

A time-based retention policy can be defined as follows:

<div class="example">
```turtle
<Collection> a ldes:EventStream ;
             tree:view <> .

<> ldes:retentionPolicy <P1> .

<P1> a ldes:DurationAgoPolicy ;
     tree:path prov:generatedAtTime ;
     tree:value "P1Y"^^xsd:duration . # Keep 1 year of data
```
</div>

A `ldes:DurationAgoPolicy` uses a `tree:value` with an `xsd:duration`-typed literal to indicate how long ago the timestamp, indicated by the `tree:path`, of the members that can be found via a `tree:View` can be compared to the current time on the server.

## Version-based retention policies ## {#version-subsets}

<div class="example">
In order to indicate you only keep 2 versions of an object referred to using `dcterms:isVersionOf`:

```turtle
<Collection> a tree:EventStream ;
             tree:view <> .

<> ldes:retentionPolicy <P1> .

<P1> a ldes:LatestVersionSubset;
     ldes:amount 2 ; 
     ldes:versionKey ( dcterms:isVersionOf )
     .
```
</div>

A `ldes:LatestVersionSubset` MUST use two predicates: `ldes:amount` and the `ldes:versionKey`.
The `ldes:amount` has a `xsd:nonNegativeInteger` datatype and indicated how many to keep that defaults to 1.
The `ldes:versionKey` is an `rdf:List` of SHACL property paths indicating objects that MUST be concatenated together to find the key on which versions are matched.

<div class="example">
For sensor datasets the version key may get more complex, grouping observations by both the observed property as the sensor that made the observation.

```turtle
<Collection> a tree:EventStream ;
             tree:view <> .

<> ldes:retentionPolicy <P1> .

<P1> a ldes:LatestVersionSubset;
     ldes:amount 2 ; 
     ldes:versionKey ( ( sosa:observedProperty ) ( sosa:madeBySensor ) ) .
```
</div>

